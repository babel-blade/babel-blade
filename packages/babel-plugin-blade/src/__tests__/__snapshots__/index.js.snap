// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-blade array map destructuring arrow function works: array map destructuring arrow function works 1`] = `

import {Connect, query} from 'urql'

const movieQuery = createQuery()
const Movie = ({id, onClose}) => (
  <div>
    <Connect
      query={query(movieQuery)}
      children={({data}) => {
        const DATA = movieQuery(data)
        const {actors} = DATA.movie
        return <ul>{actors.map(({name}) => <li>{name}</li>)}</ul>
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";

const Movie = ({ id, onClose }) => (
  <div>
    <Connect
      query={query(\`
query movieQuery{
  movie {
    actors {
      name
    }
  }
}\`)}
      children={({ data }) => {
        const DATA = data;
        const { actors } = DATA.movie;
        return (
          <ul>
            {actors.map(({ name }) => (
              <li>{name}</li>
            ))}
          </ul>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade array map destructuring normal function works: array map destructuring normal function works 1`] = `

import {Connect, query} from 'urql'

const movieQuery = createQuery()
const Movie = ({id, onClose}) => (
  <div>
    <Connect
      query={query(movieQuery)}
      children={({data}) => {
        const DATA = movieQuery(data)
        const {actors} = DATA.movie
        return (
          <ul>
            {actors.map(({name}) => {
              return <li>{name}</li>
            })}
          </ul>
        )
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";

const Movie = ({ id, onClose }) => (
  <div>
    <Connect
      query={query(\`
query movieQuery{
  movie {
    actors {
      name
    }
  }
}\`)}
      children={({ data }) => {
        const DATA = data;
        const { actors } = DATA.movie;
        return (
          <ul>
            {actors.map(({ name }) => {
              return <li>{name}</li>;
            })}
          </ul>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade assignments and aliases work: assignments and aliases work 1`] = `

import {Connect, query} from 'urql'

const movieQuery = createQuery('$id: id')
const Movie = ({id, onClose}) => (
  <div>
    <Connect
      query={query(movieQuery, {id})} // watch the query ABOVE!
      children={({data}) => {
        const DATA = movieQuery(data)
        const core = DATA
        const film = DATA.movie('count: id')
        return (
          <div>
            <h2>{core.gorilla}</h2>
            <p>{film.monkey}</p>
            <p>{DATA.chimp}</p>
          </div>
        )
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";

const Movie = ({ id, onClose }) => (
  <div>
    <Connect
      query={query(
        \`
query movieQuery($id: id){
  gorilla
  movie_90ce: movie(count: id) {
    monkey
  }
  chimp
}\`,
        {
          id
        }
      )} // watch the query ABOVE!
      children={({ data }) => {
        const DATA = data;
        const core = DATA;
        const film = DATA.movie_90ce;
        return (
          <div>
            <h2>{core.gorilla}</h2>
            <p>{film.monkey}</p>
            <p>{DATA.chimp}</p>
          </div>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade basic array map works: basic array map works 1`] = `

import {Connect, query} from 'urql'

const movieQuery = createQuery()
const Movie = ({id, onClose}) => (
  <div>
    <Connect
      query={query(movieQuery)}
      children={({data}) => {
        const DATA = movieQuery(data)
        const {actors} = DATA.movie
        return <ul>{actors.map(actor => <li>{actor.name}</li>)}</ul>
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";

const Movie = ({ id, onClose }) => (
  <div>
    <Connect
      query={query(\`
query movieQuery{
  movie {
    actors {
      name
    }
  }
}\`)}
      children={({ data }) => {
        const DATA = data;
        const { actors } = DATA.movie;
        return (
          <ul>
            {actors.map(actor => (
              <li>{actor.name}</li>
            ))}
          </ul>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade basic test of functionality: basic test of functionality 1`] = `

import {Connect, query} from 'urql'

const movieQuery = createQuery('$id: id')
const Movie = ({id, onClose}) => (
  <div>
    <Connect
      query={query(movieQuery, {id})}
      children={({data}) => {
        const DATA = movieQuery(data)
        return (
          <div>
            <h2>{DATA.movie.gorilla}</h2>
            <p>{DATA.movie.monkey}</p>
            <p>{DATA.chimp}</p>
          </div>
        )
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";

const Movie = ({ id, onClose }) => (
  <div>
    <Connect
      query={query(
        \`
query movieQuery($id: id){
  movie {
    gorilla
    monkey
  }
  chimp
}\`,
        {
          id
        }
      )}
      children={({ data }) => {
        const DATA = data;
        return (
          <div>
            <h2>{DATA.movie.gorilla}</h2>
            <p>{DATA.movie.monkey}</p>
            <p>{DATA.chimp}</p>
          </div>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade destructuring work: destructuring work 1`] = `

import {Connect, query} from 'urql'

const movieQuery = createQuery('$id: id')
const Movie = ({id, onClose}) => (
  <div>
    <Connect
      query={query(movieQuery, {id})}
      children={({data}) => {
        const DATA = movieQuery(data)
        const {actors} = DATA.movie('id: 234').credits
        return (
          <div>
            <h2>{actors.leading}</h2>
            <h2>{actors.supporting}</h2>
          </div>
        )
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";

const Movie = ({ id, onClose }) => (
  <div>
    <Connect
      query={query(
        \`
query movieQuery($id: id){
  movie_7132: movie(id: 234) {
    credits {
      actors {
        leading
        supporting
      }
    }
  }
}\`,
        {
          id
        }
      )}
      children={({ data }) => {
        const DATA = data;
        const { actors } = DATA.movie_7132.credits;
        return (
          <div>
            <h2>{actors.leading}</h2>
            <h2>{actors.supporting}</h2>
          </div>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade docs: args: docs: args 1`] = `

import {Connect, query} from 'urql'

const movieQuery = createQuery()
const Movie = () => (
  <div>
    <Connect
      query={query(movieQuery)}
      children={({data}) => {
        const DATA = movieQuery(data)
        const film = DATA.movie('limit: 5')
        const nestedQuery = film.schedule('schedule: true')
        return (
          <div>
            <Films data={film.titles} />
            <Schedule data={nestedQuery.data} />
          </div>
        )
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";

const Movie = () => (
  <div>
    <Connect
      query={query(\`
query movieQuery{
  movie_27f6: movie(limit: 5) {
    schedule_2655: schedule(schedule: true) {
      data
    }
    titles
  }
}\`)}
      children={({ data }) => {
        const DATA = data;
        const film = DATA.movie_27f6;
        const nestedQuery = film.schedule_2655;
        return (
          <div>
            <Films data={film.titles} />
            <Schedule data={nestedQuery.data} />
          </div>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade docs: directives: docs: directives 1`] = `

/* eslint-disable */
import {Connect, query} from 'urql'

const movieQuery = createQuery()
const Movie = () => (
  <div>
    <Connect
      query={query(movieQuery)}
      children={({data}) => {
        const DATA = movieQuery(data)
        const film = DATA.movie('limit: 5')
        const nestedQuery = film.schedule('@sort', 'id: 23', '@ping')
        return (
          <div>
            <Films data={film.titles} />
            <Schedule data={nestedQuery.data} />
          </div>
        )
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

/* eslint-disable */
import { Connect, query } from "urql";

const Movie = () => (
  <div>
    <Connect
      query={query(\`
query movieQuery{
  movie_b3f6: movie(limit: 5) {
    schedule_57cb: schedule(id: 23) @sort @ping {
      data
    }
    titles
  }
}\`)}
      children={({ data }) => {
        const DATA = data;
        const film = DATA.movie_b3f6;
        const nestedQuery = film.schedule_57cb;
        return (
          <div>
            <Films data={film.titles} />
            <Schedule data={nestedQuery.data} />
          </div>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade docs: fields: docs: fields 1`] = `

import {Connect, query} from 'urql'

const movieQuery = createQuery()
const Movie = () => (
  <div>
    <Connect
      query={query(movieQuery)}
      children={({data}) => {
        const DATA = movieQuery(data)
        return (
          <div>
            <h2>{DATA.movie.gorilla}</h2>
            <p>{DATA.movie.monkey}</p>
            <p>{DATA.chimp}</p>
          </div>
        )
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";

const Movie = () => (
  <div>
    <Connect
      query={query(\`
query movieQuery{
  movie {
    gorilla
    monkey
  }
  chimp
}\`)}
      children={({ data }) => {
        const DATA = data;
        return (
          <div>
            <h2>{DATA.movie.gorilla}</h2>
            <p>{DATA.movie.monkey}</p>
            <p>{DATA.chimp}</p>
          </div>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade docs: variables: docs: variables 1`] = `

import {Connect, query} from 'urql'

const movieID = 12
const movieQuery = createQuery(\`$movieID: \${movieID}\`)
const Movie = () => (
  <div>
    <Connect
      query={query(movieQuery)}
      children={({data}) => {
        const DATA = movieQuery(data)
        const film = DATA.movie('id: movieID')
        return (
          <div>
            <h2>{film}</h2>
            <p>{film.monkey}</p>
            <p>{DATA.chimp}</p>
          </div>
        )
      }}
    />
  </div>
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql";
const movieID = 12;

const Movie = () => (
  <div>
    <Connect
      query={query(\`
query movieQuery(\${\`$movieID: \${movieID}\`}){
  movie_803c: movie(id: movieID) {
    monkey
  }
  chimp
}\`)}
      children={({ data }) => {
        const DATA = data;
        const film = DATA.movie_803c;
        return (
          <div>
            <h2>{film}</h2>
            <p>{film.monkey}</p>
            <p>{DATA.chimp}</p>
          </div>
        );
      }}
    />
  </div>
);


`;

exports[`babel-blade exportable query: exportable query 1`] = `

export const pageQuery = createQuery()

const App = data => {
  const DATA = pageQuery(data)
  const movie = DATA.movie
}

      ↓ ↓ ↓ ↓ ↓ ↓

export const pageQuery = \`
query pageQuery{
  movie
}\`;

const App = data => {
  const DATA = data;
  const movie = DATA.movie;
};


`;

exports[`babel-blade injection of fragments: injection of fragments 1`] = `

/* eslint-disable */
import {Connect, query} from 'urql'

// MovieComponent.js
const movieFragment = createFragment('Movie')
const Movie = ({data}) => {
  let result = movieFragment(data)
  let movie = result.movie
  return (
    <div className="movie">
      {loaded === false ? (
        <p>Loading</p>
      ) : (
        <div>
          <h2>{movie.title}</h2>
          <p>{movie.actors.supporting}</p>
          <p>{movie.actors.leading}</p>
          <button onClick={onClose}>Close</button>
        </div>
      )}
    </div>
  )
}

Movie.fragment = movieFragment

const pageQuery = createQuery() // create a top-level query
const App = () => (
  <Connect
    query={query(pageQuery)}
    children={({loaded, data}) => {
      let result = pageQuery(data)
      // rendering Movie while adding
      // \`Movie.fragment\` into the query.
      // (could be automatic in future)
      return (
        <ul>
          <Movie data={result.movie(Movie.fragment)} />
        </ul>
      )
    }}
  />
)

      ↓ ↓ ↓ ↓ ↓ ↓

/* eslint-disable */
import { Connect, query } from "urql"; // MovieComponent.js

const Movie = ({ data }) => {
  let result = data;
  let movie = result.movie;
  return (
    <div className="movie">
      {loaded === false ? (
        <p>Loading</p>
      ) : (
        <div>
          <h2>{movie.title}</h2>
          <p>{movie.actors.supporting}</p>
          <p>{movie.actors.leading}</p>
          <button onClick={onClose}>Close</button>
        </div>
      )}
    </div>
  );
};

Movie.fragment = movieFragment => \`
fragment \${movieFragment} on Movie{
  movie {
    title
    actors {
      supporting
      leading
    }
  }
}\`;

// create a top-level query
const App = () => (
  <Connect
    query={query(\`
query pageQuery{
  movie {
    ...Moviefragment
  }
}

\${Movie.fragment("Moviefragment")} \`)}
    children={({ loaded, data }) => {
      let result = data; // rendering Movie while adding
      // \`Movie.fragment\` into the query.
      // (could be automatic in future)

      return (
        <ul>
          <Movie data={result.movie(Movie.fragment)} />
        </ul>
      );
    }}
  />
);


`;

exports[`babel-blade overlapping assignments work: overlapping assignments work 1`] = `

import {Connect, query} from 'urql'
// import {createQuery} from 'blade.macro'
const pageQuery = createQuery()
const App = () => (
  <Connect
    query={query(pageQuery)}
    children={({data}) => {
      const result = pageQuery(data)
      const actors = result.movie
      return (
        <ul>
          <Movie data={result.movie.title} />
          <Actor data={actors.supporting} />
          <Actor data={actors.leading} />
        </ul>
      )
    }}
  />
)

      ↓ ↓ ↓ ↓ ↓ ↓

import { Connect, query } from "urql"; // import {createQuery} from 'blade.macro'

const App = () => (
  <Connect
    query={query(\`
query pageQuery{
  movie {
    supporting
    leading
    title
  }
}\`)}
    children={({ data }) => {
      const result = data;
      const actors = result.movie;
      return (
        <ul>
          <Movie data={result.movie.title} />
          <Actor data={actors.supporting} />
          <Actor data={actors.leading} />
        </ul>
      );
    }}
  />
);


`;
